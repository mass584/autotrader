// Code generated by "enumer -type=ExchangePlace"; DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
)

const _ExchangePlaceName = "BitflyerCoincheck"

var _ExchangePlaceIndex = [...]uint8{0, 8, 17}

const _ExchangePlaceLowerName = "bitflyercoincheck"

func (i ExchangePlace) String() string {
	i -= 1
	if i < 0 || i >= ExchangePlace(len(_ExchangePlaceIndex)-1) {
		return fmt.Sprintf("ExchangePlace(%d)", i+1)
	}
	return _ExchangePlaceName[_ExchangePlaceIndex[i]:_ExchangePlaceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangePlaceNoOp() {
	var x [1]struct{}
	_ = x[Bitflyer-(1)]
	_ = x[Coincheck-(2)]
}

var _ExchangePlaceValues = []ExchangePlace{Bitflyer, Coincheck}

var _ExchangePlaceNameToValueMap = map[string]ExchangePlace{
	_ExchangePlaceName[0:8]:       Bitflyer,
	_ExchangePlaceLowerName[0:8]:  Bitflyer,
	_ExchangePlaceName[8:17]:      Coincheck,
	_ExchangePlaceLowerName[8:17]: Coincheck,
}

var _ExchangePlaceNames = []string{
	_ExchangePlaceName[0:8],
	_ExchangePlaceName[8:17],
}

// ExchangePlaceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangePlaceString(s string) (ExchangePlace, error) {
	if val, ok := _ExchangePlaceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangePlaceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangePlace values", s)
}

// ExchangePlaceValues returns all values of the enum
func ExchangePlaceValues() []ExchangePlace {
	return _ExchangePlaceValues
}

// ExchangePlaceStrings returns a slice of all String values of the enum
func ExchangePlaceStrings() []string {
	strs := make([]string, len(_ExchangePlaceNames))
	copy(strs, _ExchangePlaceNames)
	return strs
}

// IsAExchangePlace returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangePlace) IsAExchangePlace() bool {
	for _, v := range _ExchangePlaceValues {
		if i == v {
			return true
		}
	}
	return false
}
