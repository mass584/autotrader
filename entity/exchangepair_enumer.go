// Code generated by "enumer -type=ExchangePair"; DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
)

const _ExchangePairName = "BTC_JPYETH_JPYETH_BTCETC_JPYXRP_JPYBCH_BTCMONA_JPY"

var _ExchangePairIndex = [...]uint8{0, 7, 14, 21, 28, 35, 42, 50}

const _ExchangePairLowerName = "btc_jpyeth_jpyeth_btcetc_jpyxrp_jpybch_btcmona_jpy"

func (i ExchangePair) String() string {
	i -= 1
	if i < 0 || i >= ExchangePair(len(_ExchangePairIndex)-1) {
		return fmt.Sprintf("ExchangePair(%d)", i+1)
	}
	return _ExchangePairName[_ExchangePairIndex[i]:_ExchangePairIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangePairNoOp() {
	var x [1]struct{}
	_ = x[BTC_JPY-(1)]
	_ = x[ETH_JPY-(2)]
	_ = x[ETH_BTC-(3)]
	_ = x[ETC_JPY-(4)]
	_ = x[XRP_JPY-(5)]
	_ = x[BCH_BTC-(6)]
	_ = x[MONA_JPY-(7)]
}

var _ExchangePairValues = []ExchangePair{BTC_JPY, ETH_JPY, ETH_BTC, ETC_JPY, XRP_JPY, BCH_BTC, MONA_JPY}

var _ExchangePairNameToValueMap = map[string]ExchangePair{
	_ExchangePairName[0:7]:        BTC_JPY,
	_ExchangePairLowerName[0:7]:   BTC_JPY,
	_ExchangePairName[7:14]:       ETH_JPY,
	_ExchangePairLowerName[7:14]:  ETH_JPY,
	_ExchangePairName[14:21]:      ETH_BTC,
	_ExchangePairLowerName[14:21]: ETH_BTC,
	_ExchangePairName[21:28]:      ETC_JPY,
	_ExchangePairLowerName[21:28]: ETC_JPY,
	_ExchangePairName[28:35]:      XRP_JPY,
	_ExchangePairLowerName[28:35]: XRP_JPY,
	_ExchangePairName[35:42]:      BCH_BTC,
	_ExchangePairLowerName[35:42]: BCH_BTC,
	_ExchangePairName[42:50]:      MONA_JPY,
	_ExchangePairLowerName[42:50]: MONA_JPY,
}

var _ExchangePairNames = []string{
	_ExchangePairName[0:7],
	_ExchangePairName[7:14],
	_ExchangePairName[14:21],
	_ExchangePairName[21:28],
	_ExchangePairName[28:35],
	_ExchangePairName[35:42],
	_ExchangePairName[42:50],
}

// ExchangePairString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangePairString(s string) (ExchangePair, error) {
	if val, ok := _ExchangePairNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangePairNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangePair values", s)
}

// ExchangePairValues returns all values of the enum
func ExchangePairValues() []ExchangePair {
	return _ExchangePairValues
}

// ExchangePairStrings returns a slice of all String values of the enum
func ExchangePairStrings() []string {
	strs := make([]string, len(_ExchangePairNames))
	copy(strs, _ExchangePairNames)
	return strs
}

// IsAExchangePair returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangePair) IsAExchangePair() bool {
	for _, v := range _ExchangePairValues {
		if i == v {
			return true
		}
	}
	return false
}
